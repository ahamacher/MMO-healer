webpackHotUpdate("main",{

/***/ "./src/game_view.js":
/*!**************************!*\
  !*** ./src/game_view.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n\nclass GameView {\n  constructor(ctx) {\n    this.ctx = ctx;\n\n    this.currentLevel = 0;\n\n    this.canvas = document.getElementById('game-canvas');\n    this.state = \"start\";\n\n    this.fps = 15;\n    this.fpsInterval = 1000/ this.fps;\n    this.startTime = Date.now();\n    this.then = Date.now();\n\n    // this will stop the request animation frames if at a static screen\n    this.playing = false;\n  }\n\n  animate(fps){\n    this.fpsInterval = 1000/fps;\n    this.then = Date.now();\n    this.startTime = this.then;\n    this.rootRender();\n  }\n\n  rootRender(){\n    // setTimeout(requestAnimationFrame(this.rootRender.bind(this)), 1000);\n    if (this.playing){\n      requestAnimationFrame(this.rootRender.bind(this));\n    }\n    this.now = Date.now();\n    let elapsed = this.now - this.then;\n\n    if (elapsed > this.fpsInterval){\n      this.then = this.now - (elapsed % this.fpsInterval);\n\n      if (this.game.gameOver && this.state === \"level1\") {\n        this.level1End();\n      } else if (this.game.gameOver) {\n        this.gameOverScreen();\n        this.state = \"gameover\";\n      } else if (this.game.gameOverBad) {\n        this.gameOverBad();\n        this.state = \"gameover\";\n      } else {\n        this.game.draw(this.ctx);\n      }\n\n    }\n  }\n\n  start(){\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.ctx.fillStyle = '#050505';\n    this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    // ctx.beginPath();\n    // this.ctx.drawImage(this.bg, 0, 0, Game.DIM_X, Game.DIM_Y);\n\n    this.ctx.fillStyle = '#FFFFFF';\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this. ctx.fillText(\"TEST\", Game.DIM_X/2, Game.DIM_Y/2);\n\n\n// start button event listener\n    const backing = new Path2D();\n    backing.rect(400, 278, 200, 26);\n    this.ctx.fillStyle = \"rgba(0,0,0,0.001\";\n    this.ctx.fill(backing);\n\n    this.canvas.addEventListener('click', (e) => {\n      if (this.state === \"start\"){\n        const rect = this.canvas.getBoundingClientRect();\n        if (this.ctx.isPointInPath(backing, (e.clientX - rect.x), (e.clientY - rect.y))) {\n\n          this.tutorial();\n        }\n      }\n    });\n  }\n\n  tutorial() {\n    this.state = \"tutorial\";\n    const splash = new Image(1,1);\n    splash.src = './assets/tutorial.jpg';\n\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.ctx.fillStyle = '#050505';\n    this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    splash.onload = () => {\n      this.ctx.drawImage(splash, 0, 0, Game.DIM_X, Game.DIM_Y);\n    };\n      \n      const backing = new Path2D();\n      backing.rect(630, 320, 246, 56);\n      this.ctx.fillStyle = \"rgba(000,0,0,0.01)\";\n      this.ctx.fill(backing);\n    this.game = null;\n    this.canvas.addEventListener('click', (e) => {\n      if (this.state === \"tutorial\"){\n        const rect = this.canvas.getBoundingClientRect();\n        if (this.ctx.isPointInPath(backing, (e.clientX - rect.x), (e.clientY - rect.y))) {\n\n          this.level1();\n        }\n      }\n    });\n  }\n\n  level1(){\n    this.state = \"level1\";\n    this.game = null;\n    this.currentLevel = 1;\n    const bgm = document.getElementById(\"bgm\");\n    if (bgm){\n      bgm.parentNode.removeChild(bgm);\n    }\n\n    this.music();\n\n    let aoeRegen = new Image(1,1);\n      aoeRegen.src = \"./spellicons/assize.png\";\n    let esuna = new Image(1,1);\n      esuna.src = \"./spellicons/esuna.png\";\n    let revive = new Image(1,1);\n      revive.src = \"./spellicons/verraise.png\";\n    let cureIcon = new Image(1,1);\n      cureIcon.src = \"./spellicons/cure_ii.png\";\n    let regenIcon = new Image(1,1);\n      regenIcon.src = \"./spellicons/regen.png\";\n    let aoeHeal = new Image(1,1);\n      aoeHeal.src = \"./spellicons/helios.png\";\n    const boss = new Image(1,1);\n      boss.src = \"./assets/Bahamutff6.png\";\n    const dead = new Image(1,1);\n      dead.src = \"./assets/skull.png\";\n    const bg = new Image(1,1);\n      bg.src = \"./assets/dungeonbg1.jpg\";\n    const statusIcon = new Image(1,1);\n      statusIcon.src = \"./spellicons/status.png\";\n\n    const canvasEl = document.getElementById('game-canvas');\n    const ctx = canvasEl.getContext(\"2d\");\n  \n\n    const spellIcons = { cureIcon, regenIcon, aoeHeal, aoeRegen, esuna, revive };\n    \n    const bossScript = [\n      {spell: \"flare\", hp: 99},\n      {spell: \"flare\", hp: 95}, \n      {spell: \"lifeShaver\", hp: 85},\n      {spell: \"flare\", hp: 75},\n      {spell: \"lifeShaver\", hp: 65},\n      {spell: \"flare\", hp: 50},\n      {spell: \"lifeShaver\", hp: 45},\n      {spell: \"ahkmorn\", hp: 20},\n      {spell: \"ahkmorn\", hp: 1}\n    ];\n\n\n      const options = {\n      comp: { tank: 1, healer: 1, dps: 3 },\n      ctx, canvas: canvasEl, bossSrc: boss,\n      dead, bg, spellIcons, level: this.state, bossScript, statusIcon\n    };\n\n\n    this.game = new Game(options);\n    this.playing = true;\n    this.rootRender();\n  }\n\n  level2(){\n    this.state = \"level2\";\n    this.game = null;\n    this.currentLevel = 2;\n    this.music();\n\n    let aoeRegen = new Image(1, 1);\n    aoeRegen.src = \"./spellicons/assize.png\";\n    let esuna = new Image(1, 1);\n    esuna.src = \"./spellicons/esuna.png\";\n    let revive = new Image(1, 1);\n    revive.src = \"./spellicons/verraise.png\";\n    let cureIcon = new Image(1, 1);\n    cureIcon.src = \"./spellicons/cure_ii.png\";\n    let regenIcon = new Image(1, 1);\n    regenIcon.src = \"./spellicons/regen.png\";\n    let aoeHeal = new Image(1, 1);\n    aoeHeal.src = \"./spellicons/helios.png\";\n    const boss = new Image(1, 1);\n    boss.src = \"./assets/virtue.png\";\n    const dead = new Image(1, 1);\n    dead.src = \"./assets/skull.png\";\n    const bg = new Image(1, 1);\n    bg.src = \"./assets/stars.jpg\";\n    const statusIcon = new Image(1, 1);\n    statusIcon.src = \"./spellicons/status.png\";\n\n    const canvasEl = document.getElementById('game-canvas');\n    const ctx = canvasEl.getContext(\"2d\");\n\n    const spellIcons = { cureIcon, regenIcon, aoeHeal, aoeRegen, esuna, revive };\n\n    const bossScript = [\n      { spell: \"holy\", hp: 99 },\n      { spell: \"dualCast\", hp: 95 },\n      { spell: \"breakWeapon\", hp: 85 },\n      { spell: \"bio\", hp: 80 },\n      { spell: \"meteor\", hp: 75 },\n      { spell: \"bio\", hp: 70 },\n      { spell: \"lifeShaver\", hp: 65 },\n      { spell: \"dualCast\", hp: 50 },\n      { spell: \"bio\", hp: 40 },\n      { spell: \"lifeShaver\", hp: 35 },\n      { spell: \"meteor\", hp: 20 },\n      { spell: \"dualCast\", hp: 20 },\n      { spell: \"apocalypse\", hp: 2 }\n    ];\n\n\n    const options = {\n      comp: { tank: 2, healer: 1, dps: 7 },\n      ctx, canvas: canvasEl, bossSrc: boss,\n      dead, bg, spellIcons, level: this.state, bossScript, statusIcon\n    };\n\n\n    this.game = new Game(options);\n    this.playing = true;\n    this.rootRender();\n  }\n\n  music(){\n    let promise;\n    switch (this.currentLevel) {\n      case 1:\n        if (!document.getElementById('bgm')) {\n          this.addBGM(\"./assets/ultima.mp3\");\n        } else {\n          this.changeBGM(\"./assets/ultima.mp3\");\n        }\n        const bgm = document.getElementById(\"bgm\");\n        bgm.currentTime = 60.5;\n        promise = bgm.play();\n        if (promise){\n          promise.catch(() => {});\n        }\n        bgm.volume = 0.4;\n        break;\n      case 2:\n        this.changeBGM('./assets/Answers.mp3');\n        promise = document.getElementById('bgm').play();\n        if (promise) {\n          promise.catch(() => {});\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  addBGM(src){\n    let bg = document.createElement(\"audio\");\n    bg.src=src;\n    bg.id=\"bgm\";\n    bg.loop = true;\n    document.getElementById('music').appendChild(bg);\n\n    let node = document.createElement(\"img\");\n    node.src=\"./assets/Speaker_Icon.png\";\n    node.id = \"speaker\";\n    node.addEventListener('click', this.togglePause);\n\n    document.getElementById('canvas').appendChild(node);\n  }\n\n  changeBGM(src){\n    let bgm = document.getElementById('bgm');\n    if (bgm.playing){\n      bgm.pause();\n    }\n    bgm.src=src;\n    bgm.currentTime = 0;\n    bgm.loop = true;\n    bgm.load();\n  }\n\n  togglePause() {\n    // console.log(\"YO YOU WANNA PAUSE STUFF\");\n    const bgm = document.getElementById(\"bgm\");\n    const img = document.getElementById(\"speaker\");\n\n    bgm.paused ? bgm.play() : bgm.pause();\n    \n    return bgm.paused ? img.src = \"./assets/mute_icon.png\" : img.src = \"./assets/Speaker_Icon.png\";\n    \n  }\n\n  gameOverBad() {\n    // event listener to restart the game\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    const eb = new Path2D();\n    eb.rect(440, 369, 120, 2);\n    this.ctx.fillStyle = \"rgba(255,255,255,1)\";\n    this.ctx.fill(eb);\n\n    this.ctx.fillStyle = 'FFFFFF';\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText(\"You Died...\", Game.DIM_X / 2, Game.DIM_Y / 2);\n    this.ctx.fillText(\"Play again?\", 500, 360);\n\n\n    const backing = new Path2D();\n    backing.rect(430, 340, 150, 26);\n    this.ctx.fillStyle = \"rgba(0,0,0,0.05)\";\n    this.ctx.fill(backing);\n\n\n    this.canvas.addEventListener('click', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      if (this.ctx.isPointInPath(backing, (e.clientX - rect.x), (e.clientY - rect.y))) {\n\n        this.level1();\n      }\n    });\n    // end event listener\n\n    this.playing = false;\n  }\n\n  level1End() {\n    // gameover screen\n\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    let overhealVal = Math.floor((this.game.overheal / this.game.healed) * 100);\n    if (isNaN(overhealVal)) {\n      overhealVal = 0;\n    }\n    const overhealText = \"Overheal percentage %\" + overhealVal;\n    const deathCountText = \"Death count: \" + this.game.deathCount;\n    const totalHealed = \"Total Healed: \" + this.game.healed + \" hp\";\n    const eb = new Path2D();\n    eb.rect(440, (Game.DIM_Y / 2) + 93, 120, 2);\n    this.ctx.fillStyle = \"rgba(255,255,255,1)\";\n    this.ctx.fill(eb);\n\n    this.ctx.fillStyle = 'FFFFFF';\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText(overhealText, Game.DIM_X / 2, Game.DIM_Y / 2);\n    this.ctx.fillText(totalHealed, Game.DIM_X / 2, (Game.DIM_Y / 2) + 30);\n    this.ctx.fillText(deathCountText, Game.DIM_X / 2, (Game.DIM_Y / 2) + 60);\n    this.ctx.fillText(\"Next Level\", Game.DIM_X / 2, (Game.DIM_Y / 2) + 90);\n\n    // event listener to restart the game\n    const backing = new Path2D();\n    backing.rect(430, 370, 150, 26);\n    this.ctx.fillStyle = \"rgba(0,0,0,0.05)\";\n    this.ctx.fill(backing);\n\n    this.canvas.addEventListener('click', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      if (this.ctx.isPointInPath(backing, (e.clientX - rect.x), (e.clientY - rect.y))) {\n\n        this.level2();\n      }\n    });\n    // end event listener\n\n    this.playing = false;\n  }\n\n  gameOverScreen() {\n    // gameover screen\n\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n    let overhealVal = Math.floor((this.game.overheal / this.game.healed) * 100);\n    if (isNaN(overhealVal)) {\n      overhealVal = 0;\n    }\n    const overhealText = \"Overheal percentage %\" + overhealVal;\n    const deathCountText = \"Death count: \" + this.game.deathCount;\n    const totalHealed = \"Total Healed: \" + this.game.healed + \" hp\";\n    const eb = new Path2D();\n    eb.rect(438, (Game.DIM_Y / 2) + 93, 120, 2);\n    this.ctx.fillStyle = \"rgba(255,255,255,1)\";\n    this.ctx.fill(eb);\n\n    this.ctx.fillStyle = 'FFFFFF';\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText(overhealText, Game.DIM_X / 2, Game.DIM_Y / 2);\n    this.ctx.fillText(totalHealed, Game.DIM_X / 2, (Game.DIM_Y / 2) + 30);\n    this.ctx.fillText(deathCountText, Game.DIM_X / 2, (Game.DIM_Y / 2) + 60);\n    this.ctx.fillText(\"Play again?\", Game.DIM_X / 2, (Game.DIM_Y / 2) + 90);\n\n    // event listener to restart the game\n    const backing = new Path2D();\n    backing.rect(430, 370, 150, 26);\n    this.ctx.fillStyle = \"rgba(0,0,0,0.05)\";\n    this.ctx.fill(backing);\n\n    this.canvas.addEventListener('click', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      if (this.ctx.isPointInPath(backing, (e.clientX - rect.x), (e.clientY - rect.y))) {\n        this.level1();\n      }\n    });\n    // end event listener\n    this.playing = false;\n  }\n}\n\n\n\nmodule.exports = GameView;\n\n//# sourceURL=webpack:///./src/game_view.js?");

/***/ })

})